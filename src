
//packages 
import java.awt.*; 
import java.awt.event.*;
import java.io.*;

public class JavaEdit extends Frame implements ActionListener {

	String clipBoard;
	String fileName;
	TextArea text;
	MenuItem newMI, openMI, saveMI, saveAsMI, exitMI;
	MenuItem cutMI, deleteMI, copyMI pasteMI, selectAllMI;
	MenuItem aboutJavaEditMI;
	
    /**
     * Constructor
     */
	public JavaEdit() {
		super("JavaEdit");         		
		setLayout(new BorderLayout());  

		// create menu bar
		MenuBar menubar = new MenuBar();
		setMenuBar(menubar);

		// create file menu
		Menu fileMenu = new Menu("File");
		menubar.add(fileMenu);
		newMI = fileMenu.add(new MenuItem("New"));
		newMI.addActionListener(this);
		openMI = fileMenu.add(new MenuItem("Open"));
		openMI.addActionListener(this);
		fileMenu.addSeparator();
		saveMI = fileMenu.add(new MenuItem("Save"));
		saveMI.addActionListener(this);							
		saveAsMI = fileMenu.add(new MenuItem("Save As..."));
		saveAsMI.addActionListener(this);						
		fileMenu.addSeparator();
		exitMI = fileMenu.add(new MenuItem("Exit"));
		exitMI.addActionListener(this);
		

		// Edit menu
		Menu editMenu = new Menu("Edit");
		menubar.add(editMenu);
		cutMI = editMenu.add(new MenuItem("Cut"));
		cutMI.addActionListener(this);
		copyMI = editMenu.add(new MenuItem("Copy"));
		copyMI.addActionListener(this);
		pasteMI = editMenu.add(new MenuItem("Paste"));
		pasteMI.addActionListener(this);
		deleteMI = editMenu.add(new MenuItem("Delete"));
		deleteMI.addActionListener(this);
		selectAllMI = editMenu.add(new MenuItem("Select All"));		
		selectAllMI.addActionListener(this);						
		
		// Help menu 
		Menu helpMenu = new Menu("Help");
		menubar.add(helpMenu); 
		aboutJavaEditMI = helpMenu.add(new MenuItem("About JavaEdit"));
		aboutJavaEditMI.addActionListener(this);
	     
        // Text Editing 
	    text = new TextArea();
	    add(text, BorderLayout.CENTER);
	}

    // implementing ActionListener
	public void actionPerformed(ActionEvent event) {
	    Object source = event.getSource();
	    if(source == newMI) {
    		clearText();
	    	fileName = null;
		    	setTitle("JavaEdit");   // reset frame title
		  }
		  else if(source == openMI) {
				doOpen();
		  }
		  else if(source == exitMI) {
	        	System.exit(0);
	    }
	    else if (source == saveMI) {
	        	Save();
	    }
	    else if (source == saveAsMI) {
	    		SaveAs();
	    } 
	    else if(source == selectAllMI) {
	    		doSelect();
	    }
	  	else if(source == cutMI) {
				doCopy();
				doDelete();
	  	}
	  	else if(source == copyMI) {
				doCopy();
	  	}
	  	else if(source == pasteMI) {
				doPaste();
	  	}
		  else if(source == deleteMI) {
				doDelete();
		  }
		  else if (source == aboutJavaEditMI) {
			 MessageDialog dialog = new MessageDialog(this, "About Word Text",
			 "Word Text in Java, Version 1.5, 2019");
			  	dialog.setVisible(true);
			  	return; 		  
			  	
		}
	}
			

	/**
	 * method to specify and open a file
	 */
	private void doOpen() {
	    // display file selection dialog
		FileDialog fDialog = new FileDialog(this, "Open ...", FileDialog.LOAD);
		fDialog.setVisible(true);
		// Get the file name chosen by the user
		String name = fDialog.getFile();
		// If user canceled file selection, return without doing anything.
		if(name == null)
				return;
		fileName = fDialog.getDirectory() + name;
		FileReader reader=null;
        try {
			reader = new FileReader(fileName);
	    } catch (FileNotFoundException ex) {
	        MessageDialog dialog = new MessageDialog(this, "Error Message",
	                                                 "File Not Found: "+fileName);
                dialog.setVisible(true);
                return;
	    }
        
			BufferedReader bReader = new BufferedReader(reader);

		StringBuffer textBuffer = new StringBuffer();
		try {
		    String textLine = bReader.readLine();
			while (textLine != null) {
				textBuffer.append(textLine + '\n');
				textLine = bReader.readLine();
			}
			bReader.close();
			reader.close();
		} catch (IOException ioe) {
	        MessageDialog dialog = new MessageDialog(this, "Error Message",
	                                   "Error reading file: "+ioe.toString());
            dialog.setVisible(true);
            return;
		}
		setTitle("JavaEdit: " +name);   
		text.setText(textBuffer.toString());
	}
			
	// Method to save the file 
	public void Save() {
		if(fileName == null)
		{
			SaveAs();
		}
	FileWriter fileCharStream1 = null; 
		try { 
			fileCharStream1 =new FileWriter(fileName);
       	 	fileCharStream1.write(text.getText());
		} catch (IOException excpt) {
            MessageDialog dialog = new MessageDialog(this, "Error Message",
                    fileName);
            dialog.setVisible(true);
            return;
            
        } finally {  
               closeFileWriter(fileCharStream1); 
           }

		}
	
	
		// method for Save As
		private void SaveAs() {
			
			 // display Save As selection dialog		
			FileDialog fDialog = new FileDialog(this, "Save As...", FileDialog.SAVE);
			fDialog.setVisible(true);		
			// Get the file name chosen by the user
			String name = fDialog.getFile();
			// If user canceled file selection, return without doing anything.
			if(name == null)
				return;
			fileName = fDialog.getDirectory() + name;
			setTitle("JavaEdit:" + name);   
			
			fDialog.setFile(name);
			FileWriter fileCharStream = null;
			
			try { 
				fileCharStream = new FileWriter(fileName);
				fileCharStream.write(text.getText());
				
			} catch (IOException excpt) {
				MessageDialog dialog = new MessageDialog(this, "Error Message",
						fileName); // displays error message 
				fDialog.setVisible(true);
				return;
			} finally {
				closeFileWriter(fileCharStream);
			}	
		
		}
		// method for closeFileWriter 
		 public static void closeFileWriter(FileWriter fileName) {
		        try {
		            if (fileName != null) { 	               
		               fileName.close(); 
		            }
		         } catch (IOException closeExcpt) {
		            System.out.println("Error closing file: " + closeExcpt.getMessage()); 
		         }

		        	return;
		 }
			
	
	/**
	 * method to clear text editing area
	 */
	private void clearText() {
		text.setText("");
	}

    /**
     * method to copy selected text to the clipBoard
     */
	private void doCopy() {
		clipBoard = new String(text.getSelectedText());
	}

    /**
     * method to delete selected text
     */
	private void doDelete() {
		text.replaceRange("", text.getSelectionStart(), text.getSelectionEnd());
	}
// 
	private void saveMI() {
		Save();
	}
	
	private void saveAsMI() {
		SaveAs();
	}
	//method to copy all selected text
	private void doSelect() {
		text.selectAll();

	}
	
	/**
	 * method to replace current selection with the contents of the clipBoard
	 */
	private void doPaste() {
	    if(clipBoard != null) {
		    text.replaceRange(clipBoard, text.getSelectionStart(),
		                      text.getSelectionEnd());
			}

	}

	/**
	 * class for message dialog
	 */
	class MessageDialog extends Dialog implements ActionListener {
	    private Label message;
	    private Button okButton;
	    

	    // Constructor
	    public MessageDialog(Frame parent, String title, String messageString) {
	        super(parent, title, true);
	        setSize(400, 100);
	        setLocation(150, 150);
	        setLayout(new BorderLayout());

	        message = new Label(messageString, Label.CENTER);
	        add(message, BorderLayout.CENTER);

            Panel panel = new Panel(new FlowLayout(FlowLayout.CENTER));
            add(panel, BorderLayout.SOUTH);
	        okButton = new Button(" OK ");
	        okButton.addActionListener(this);
	        panel.add(okButton);  
	        
	        // closes MessageDialog Window 
	        this.addWindowListener( new WindowAdapter() {
	             @Override
	              public void windowClosing(WindowEvent we) {
	                setVisible(false);
	                 dispose();
	               }
	            });
	        
	    }

	    // implementing ActionListener
	    public void actionPerformed(ActionEvent event) {
	        setVisible(false);
	        dispose();
	    }
	}
	
	
    /**
     * the main method
     */
    public static void main(String[] argv) {
        // create frame
        JavaEdit frame = new JavaEdit();
	    Dimension size = Toolkit.getDefaultToolkit().getScreenSize();
        frame.setSize(size.width-80, size.height-80);
        frame.setLocation(20, 20);

        // add window closing listener
        frame.addWindowListener(new WindowAdapter() {
	        public void windowClosing(WindowEvent e) {
	            System.exit(0);
	        }
	    });

        // show the frame
        frame.setVisible(true);
    }
}
